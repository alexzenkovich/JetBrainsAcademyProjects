type: edu
custom_name: stage6
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.*;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class Main {
        public static void main(String[] args) {

            String operation = "enc";
            String message = "";
            int key = 0;
            String resMessage = "";
            List<String> arguments = new ArrayList<>(Arrays.asList(args));

            if (arguments.contains("-mode")) {
                operation = choiceArgs(args, "-mode");
            }
            if (arguments.contains("-key")) {
                key = Integer.parseInt(choiceArgs(args, "-key"));
            }
            if (arguments.contains("-data") && (arguments.contains("-in") ||
                    !arguments.contains("-in"))) {
                message = choiceArgs(args, "-data");
            } else if (arguments.contains("-in") && !arguments.contains("-data")) {
                message = inputMessage(args);
            }
            switch (operation) {
                case "enc":
                    resMessage = encrypte(message, key);
                    break;
                case "dec":
                    resMessage = decrypte(message, key);
                    break;
            }
            if (arguments.contains("-out")) {
                outputMessage(args, resMessage);
            } else {
                System.out.println(resMessage);
            }
        }

        public static String inputMessage(String[] arr) {
            StringBuilder sb = new StringBuilder();
            String filename = choiceArgs(arr, "-in");
            try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
                while (br.ready()) {
                    sb.append(br.readLine());
                }
            } catch (IOException e) {
                System.out.println("Error");
            }
            return sb.toString();
        }

        public static void outputMessage(String[] arr, String message) {
            String filename = choiceArgs(arr, "-out");
            try (PrintWriter pw = new PrintWriter(filename)) {
                pw.print(message);
            } catch (IOException e) {
                System.out.println("file is already exists.");
            }
        }

        public static String choiceArgs(String[] arr, String str) {
            String res = "";
            for (int i = 0; i < arr.length; i++) {
                if (arr[i].equals(str)) {
                    res = arr[i + 1];
                }
            }
            return res;
        }

        public static String decrypte(String message, int key) {
            StringBuilder decMessage = new StringBuilder();
            for (int i = 0; i < message.length(); i++) {
                int code = message.charAt(i);
                char letter = (char) (code - key);
                decMessage.append((letter));
            }

            return decMessage.toString();
        }

        public static String encrypte(String message, int key) {
            StringBuilder encMessage = new StringBuilder();
            for (int i = 0; i < message.length(); i++) {
                int code = message.charAt(i);
                char letter = (char) (code + key);
                encMessage.append((letter));
            }
            return encMessage.toString();
        }
    }
  learner_created: true
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement
status: Solved
record: 6
