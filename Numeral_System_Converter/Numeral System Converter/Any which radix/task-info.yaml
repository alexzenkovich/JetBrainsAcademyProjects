type: edu
custom_name: stage4
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    class Clue {

        final String input;
        final String answer;
        final boolean provideAnswer;

        Clue(final String input, final String answer, final boolean provideAnswer) {
            this.input = input;
            this.answer = answer;
            this.provideAnswer = provideAnswer;
        }

        Clue(final String input, final String answer) {
            this(input, answer, false);
        }

        Clue(final String input) {
            this(input, null, false);
        }
    }


    public class ConverterTest extends StageTest<Clue> {

        public ConverterTest() {
            super(Main.class);
        }

        static TestCase<Clue> testToAnswer(final String input, final String answer, final boolean provideAnswer) {
            return new TestCase<Clue>()
                .setAttach(new Clue(input, answer, provideAnswer))
                .setInput(input);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                /* Tests with a hint: */
                testToAnswer("10\n11\n2\n", "1011", true),
                testToAnswer("1\n11111\n10\n", "5", true),
                testToAnswer("10\n1000\n36\n", "rs", true),
                testToAnswer("21\n4242\n6\n", "451552", true),
                testToAnswer("7\n12\n11\n", "9", true),
                testToAnswer("5\n300\n10\n", "75", true),
                testToAnswer("1\n11111\n5\n", "10", true),
                testToAnswer("10\n4\n1\n", "1111", true),

                /* Tests without a hint: */
                testToAnswer("10\n12\n2\n", "1100", false),
                testToAnswer("1\n1111111\n10\n", "7", false),
                testToAnswer("10\n1001\n36\n", "rt", false),
                testToAnswer("21\n4243\n6\n", "451553", false),
                testToAnswer("7\n13\n11\n", "a", false),
                testToAnswer("5\n301\n10\n", "76", false),
                testToAnswer("1\n111111\n5\n", "11", false),
                testToAnswer("10\n5\n1\n", "11111", false)
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            final String[] lines = reply
                .lines()
                .filter(line -> !line.isEmpty())
                .toArray(String[]::new);

            if (lines.length == 0) {
                return new CheckResult(
                    false,
                    "Your program doesn't print any line."
                );
            }

            final String answer = lines[lines.length - 1];

            if (!answer.equals(clue.answer)) {
                if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your answer is wrong.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer + "\n" +
                            "Correct answer: " + clue.answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your answer is wrong."
                    );
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;

    public class Main {
        public static void main(String[] args) {

            String number = "";
            int radix = 0;

            try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
                number = reader.readLine();
                radix = Integer.parseInt(reader.readLine());
            } catch (IOException e) {
                System.out.println("Exception input");
            }

            if (radix == 2) {
                System.out.println(fromDecimalToBinary(number));
            } else if (radix == 8) {
                System.out.println(fromDecimalToOctop(number));
            } else if (radix == 16) {
                System.out.println(fromDecimalToHex(number));
            }
        }

        public static String fromDecimalToHex(String number) {
            int num = Integer.parseInt(number);
            int temp = Integer.parseInt(number);
            StringBuilder res = new StringBuilder();
            res.append("0x");
            if (num == 0) res.append(0);
            int count = 0;
            while (temp != 0) {
                temp /= 16;
                count++;
            }
            String[] digits = new String[count];
            int i = 0;
            while (num != 0) {
                int remainder = num % 16;
                if (remainder <= 9) {
                    digits[i] = String.valueOf(remainder);
                } else {
                    switch (remainder) {
                        case 10:
                            digits[i] = "a";
                            break;
                        case 11:
                            digits[i] = "b";
                            break;
                        case 12:
                            res.append("c");
                            break;
                        case 13:
                            digits[i] = "d";
                            break;
                        case 14:
                            digits[i] = "e";
                            break;
                        case 15:
                            digits[i] = "f";
                            break;
                    }
                }
                num /= 16;
                i++;
            }
            for (int j = digits.length - 1; j >= 0; j--) {
                res.append(digits[j]);
            }
            return res.toString();
        }

        public static String fromDecimalToOctop(String number) {
            StringBuilder res = new StringBuilder();
            res.append(0);
            int temp = Integer.parseInt(number);
            int num = Integer.parseInt(number);
            if (num == 0) res.append(0);
            int count = 0;
            while (temp != 0) {
                temp /= 8;
                count++;
            }
            int[] digits = new int[count];
            int i = 0;
            while (num != 0) {
                int remainder = num % 8;
                digits[i] = remainder;
                i++;
                num /= 8;
            }
            for (int j = digits.length - 1; j >= 0; j--) {
                res.append(digits[j]);
            }
            return res.toString();
        }

        public static String fromDecimalToBinary(String number) {
            StringBuilder result = new StringBuilder();
            result.append("0b");
            int temp = Integer.parseInt(number);
            int num = Integer.parseInt(number);
            if (num == 0) result.append(0);
            int count = 0;
            while (temp != 0) {
                temp /= 2;
                count++;
            }
            int[] digitals = new int[count];
            int i = 0;
            while (num != 0) {
                int remainder = num % 2;
                if (remainder == 0) {
                    digitals[i] = 0;
                } else {
                    digitals[i] = 1;
                }
                num /= 2;
                i++;
            }
            for (int j = digitals.length - 1; j >= 0; j--) {
                result.append(digitals[j]);
            }
            return result.toString();
        }

        public static String fromBinaryToHex(String number) {
            StringBuilder res = new StringBuilder();
            res.append("0x");
            StringBuilder addZero = new StringBuilder();
            int check = number.length();
            if (check % 4 != 0) {
                while (check % 4 != 0) {
                    addZero.append(0);
                    check++;
                }
            }
            addZero.append(number);
            String[] digits = addZero.toString().split("");
            int temp = 0;
            for (int i = 0; i < digits.length; i = i + 4) {
                if (Integer.parseInt(digits[i]) == 1) temp += 8;
                if (Integer.parseInt(digits[i + 1]) == 1) temp += 4;
                if (Integer.parseInt(digits[i + 2]) == 1) temp += 2;
                if (Integer.parseInt(digits[i + 3]) == 1) temp += 1;
                if (temp <= 9) res.append(temp);
                else if (temp == 10) res.append("A");
                else if (temp == 11) res.append("B");
                else if (temp == 12) res.append("C");
                else if (temp == 13) res.append("D");
                else if (temp == 14) res.append("E");
                else if (temp == 15) res.append("F");
            }
            return res.toString();
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/41/stages/217/implement
status: Solved
record: 4
